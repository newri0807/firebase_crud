{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","useState","open","setOpen","input","setInput","classes","Modal","onClose","e","className","Input","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7d1f7d3.chunk.js","sourcesContent":["// firebase 연결하기!\nimport firebase from \"firebase\";\n\n// 1. initialize\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyCWcGH4UY5BGJGxjgonrmnMzxJJygsP_3k\",\n  authDomain: \"reactcrud-58176.firebaseapp.com\",\n  databaseURL: \"https://reactcrud-58176-default-rtdb.firebaseio.com\",\n  projectId: \"reactcrud-58176\",\n  storageBucket: \"reactcrud-58176.appspot.com\",\n  messagingSenderId: \"207498026599\",\n  appId: \"1:207498026599:web:038e2d3265817a67553ec2\",\n  measurementId: \"G-1J4HWFC2F0\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState } from \"react\";\nimport \"./Todo.css\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  ImageIcon,\n  Button,\n  Modal,\n  Input,\n} from \"@material-ui/core\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// firebase\nimport db from \"./firebase\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction Todo(props) {\n  // hooks & Modal 창을 사용해서 수정기능 추가하기\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState();\n\n  // Material -> styles\n  const classes = useStyles();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  // 수정 함수\n  const updateTodo = () => {\n    // 새로운 입력 값으로 업데이트\n    db.collection(\"todos\").doc(props.todo.id).set(\n      {\n        todo: input,\n      },\n      { merge: true }\n    );\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Modal open={open} onClose={(e) => setOpen(false)}>\n        <div className={classes.paper}>\n          <h1>fix it!</h1>\n          <Input\n            // 기존 값도 나타내주자\n            placeholder={props.todo.todo}\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n          <Button onClick={(e) => updateTodo()}>update</Button>\n        </div>\n      </Modal>\n\n      <List className=\"todolist-entry\">\n        <ListItem className=\"todo-inputbox\">\n          <ListItemAvatar>\n            {/* <Avatar>\n            <ImageIcon />\n          </Avatar> */}\n          </ListItemAvatar>\n\n          <ListItemText\n            primary={props.todo.todo}\n            // secondary=\"마감 기한\"\n          ></ListItemText>\n        </ListItem>\n        <Button className=\"update-button\" onClick={(e) => setOpen(true)}>\n          수정\n        </Button>\n        <div className=\"delete-button\">\n          <DeleteForeverIcon\n            onClick={(event) =>\n              db.collection(\"todos\").doc(props.todo.id).delete()\n            }\n          />\n        </div>\n      </List>\n    </>\n  );\n}\n\nexport default Todo;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Todo from \"./Todo\";\n//\n// import Button from \"@material-ui/core/Button\";\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\";\n\n// import firebase db\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  // state\n  // const [todos, setTodos] = useState([\"알고리즘 풀기\", \"책 읽기\"]);\n  // const [input, setInput] = useState(\"\");\n  // console.log(input);\n  // console.log(todos);\n\n  //! firebase store\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // when the app loads, we need to listen to the database and fetch new todos as they get added/removed\n  useEffect(() => {\n    // 여기에 코드..! app.js 가 불러와졌을 때 실행될 코드\n    //! firestore에서 데이터 가져오기!\n    //! collection - onSnapshot!\n    // orderBy이용해서 내림차순 정렬하기\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        // console.log(snapshot.docs.map((doc) => doc.data().todo));\n        // setTodos(snapshot.docs.map((doc) => doc.data().todo));\n        setTodos(\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\n        );\n      });\n  }, []);\n\n  // 버튼 클릭시 todos에 state 추가\n  const addTodo = (event) => {\n    // console.log(\"🍎\");\n\n    // 이거 해주지 않으면.. 어찌 되는지 알지?\n    // submit 과 같은 고유 동작을 했을 때...새로고침이 되버리는데..\n    // 이벤트 전파를 중단\n    //! will stop the refresh\n    event.preventDefault();\n\n    //! firestore에 데이터 추가하기!\n    //! collection - add\n    // very simple code..!\n    db.collection(\"todos\").add({\n      todo: input,\n      // 시간\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    // setTodos(input); // =>  error 발생!!\n    // setTodos([...todos, input]);\n    setInput(\"\");\n    // console.log(todos);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"appContainer\">\n        <div className=\"appTitle\">\n          <h1>Lama TODO?</h1>\n        </div>\n\n        <form className=\"appInput\">\n          {/* <input\n          value={input}\n          onChange={(event) => {\n            setInput(event.target.value);\n          }}\n        /> */}\n\n          <FormControl>\n            <InputLabel>입력하시오..!</InputLabel>\n            <Input\n              value={input}\n              onChange={(event) => {\n                setInput(event.target.value);\n              }}\n            />\n          </FormControl>\n\n          {/* <button type=\"submit\" onClick={addTodo}>\n          add\n        </button> */}\n          <div className=\"add-button\">\n            <Button\n              disabled={!input} //! 인풋값이 없을 경우 기능이 작동하지 않도록!\n              type=\"submit\"\n              onClick={addTodo}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              add\n            </Button>\n          </div>\n        </form>\n\n        <div className=\"todoList\">\n          <ul>\n            {/* map 사용해서 todo 뿌리기 */}\n            {todos.map((todo) => (\n              // <li>{todo}</li>\n              <Todo todo={todo} />\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}